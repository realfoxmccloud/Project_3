Cleaned R script from Cleaning_Hylaeus_Data.qmd#
# Use this for live demo or debugging without formatting#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Install packages if needed (uncomment and run if necessary)#
# install.packages("readxl")#
# install.packages("dplyr")#
# install.packages("stringr")#
# install.packages("lubridate")#
#
# Load the libraries#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(stringr)   # For finding keywords in text#
library(lubridate) # For working with dates and times#
#
getwd()#
#
list.files()#
#
# Load all sheets from the Excel file#
excel_file <- "Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
sheet_names <- excel_sheets(#
#
# Convert sheet names to Date format#
# Assumes sheet names are in MMDDYY format, like "041523"#
sheet_dates <- mdy(sheet_names)#
#
excel_file)#
#
# Read in all sheets, adding a 'Date' column based on the sheet name#
data_list <- lapply(sheet_names, function(sheet) {#
  read_excel(excel_file, sheet = sheet) %>%#
    mutate(Date = sheet)  # Add the sheet name as a Date column#
})#
#
# Combine all sheets into one big dataframe#
observations_raw <- bind_rows(data_list)#
#
# Check the first few rows to confirm it loaded properly#
head(observations_raw)#
#
# Peek at the data structure#
str(observations_raw)#
#
# Check the column names#
colnames(observations_raw)#
#
# Combine Date and Timestamp into one Datetime field#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%m%d%y %I:%M %p")#
  )#
#
# Check if the Datetime column looks correct#
head(observations_clean$Datetime)#
#
# Create logical columns based on keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Confirm new columns are added#
head(observations_clean[, c("Photo_Taken", "Species_Sighted", "Observation_Noted")])#
#
# Summarize temperature to see missing values#
summary(observations_clean$`Temperature (°F)`)#
#
# Check missing Wind Notes and Wind Direction#
sum(is.na(observations_clean$`Wind Notes`))#
sum(is.na(observations_clean$`Wind Direction`))#
#
# Reorganizing the columns to prioritize key fields#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Preview the reorganized data#
head(observations_clean)#
#
# Save as CSV#
write.csv(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
#
# Save as RDS (R's internal data format)#
saveRDS(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
# # Cleaned R script from Cleaning_Hylaeus_Data.qmd (Fixed version)#
# Use this for live demo or debugging without formatting#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Install packages if needed (uncomment and run if necessary)#
# install.packages("readxl")#
# install.packages("dplyr")#
# install.packages("stringr")#
# install.packages("lubridate")#
#
# Load the libraries#
excel_file <- "Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to Date#
sheet_dates <- mdy(sheet_names)#
#
# Step 3: Read in all sheets and include real Date values#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(Date = sheet_dates[i])  # Use converted date#
})#
#
# Step 4: Combine all sheets into one big dataframe#
observations_raw <- bind_rows(data_list)#
#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(stringr)   # For finding keywords in text#
library(lubridate) # For working with dates and times#
#
getwd()#
#
list.files()#
#
# Load all sheets from the Excel file#
excel_file <- "Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
excel_file)#
#
# Read in all sheets, adding a 'Date' column based on the sheet name#
data_list <- lapply(sheet_names, function(sheet) {#
  read_excel(excel_file, sheet = sheet) %>%#
    mutate(Date = sheet)  # Add the sheet name as a Date column#
})#
#
# Combine all sheets into one big dataframe#
observations_raw <- bind_rows(data_list)#
#
# Check the first few rows to confirm it loaded properly#
head(observations_raw)#
#
# Peek at the data structure#
str(observations_raw)#
#
# Check the column names#
colnames(observations_raw)#
#
# Combine Date and Timestamp into one Datetime field#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%m%d%y %I:%M %p")#
  )#
#
# Check if the Datetime column looks correct#
head(observations_clean$Datetime)#
#
# Create logical columns based on keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Confirm new columns are added#
head(observations_clean[, c("Photo_Taken", "Species_Sighted", "Observation_Noted")])#
#
# Summarize temperature to see missing values#
summary(observations_clean$`Temperature (°F)`)#
#
# Check missing Wind Notes and Wind Direction#
sum(is.na(observations_clean$`Wind Notes`))#
sum(is.na(observations_clean$`Wind Direction`))#
#
# Reorganizing the columns to prioritize key fields#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Preview the reorganized data#
head(observations_clean)#
#
# Save as CSV#
write.csv(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
#
# Save as RDS (R's internal data format)#
saveRDS(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
# Cleaned R script from Cleaning_Hylaeus_Data.qmd (Fixed version)#
# Use this for live demo or debugging without formatting#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Install packages if needed (uncomment and run if necessary)#
# install.packages("readxl")#
# install.packages("dplyr")#
# install.packages("stringr")#
# install.packages("lubridate")#
#
# Load the libraries#
excel_file <- "Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to Date#
sheet_dates <- mdy(sheet_names)#
#
# Step 3: Read in all sheets and include real Date values#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(Date = sheet_dates[i])  # Use converted date#
})#
#
# Step 4: Combine all sheets into one big dataframe#
observations_raw <- bind_rows(data_list)#
#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(stringr)   # For finding keywords in text#
library(lubridate) # For working with dates and times#
#
getwd()#
#
list.files()#
#
# Load all sheets from the Excel file#
excel_file <- "Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
excel_file)#
#
# Read in all sheets, adding a 'Date' column based on the sheet name#
data_list <- lapply(sheet_names, function(sheet) {#
  read_excel(excel_file, sheet = sheet) %>%#
    mutate(Date = sheet)  # Add the sheet name as a Date column#
})#
#
# Combine all sheets into one big dataframe#
observations_raw <- bind_rows(data_list)#
#
# Check the first few rows to confirm it loaded properly#
head(observations_raw)#
#
# Peek at the data structure#
str(observations_raw)#
#
# Check the column names#
colnames(observations_raw)#
#
# Combine Date and Timestamp into one Datetime field#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%m%d%y %I:%M %p")#
  )#
#
# Check if the Datetime column looks correct#
head(observations_clean$Datetime)#
#
# Create logical columns based on keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Confirm new columns are added#
head(observations_clean[, c("Photo_Taken", "Species_Sighted", "Observation_Noted")])#
#
# Summarize temperature to see missing values#
summary(observations_clean$`Temperature (°F)`)#
#
# Check missing Wind Notes and Wind Direction#
sum(is.na(observations_clean$`Wind Notes`))#
sum(is.na(observations_clean$`Wind Direction`))#
#
# Reorganizing the columns to prioritize key fields#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Preview the reorganized data#
head(observations_clean)#
#
# Save as CSV#
write.csv(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
#
# Save as RDS (R's internal data format)#
saveRDS(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
# Cleaned R script from Cleaning_Hylaeus_Data.qmd (Final Fixed Version)#
# Use this for live demo or reproducible processing of Hylaeus observations#
#
# Load necessary libraries#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(lubridate) # For working with dates and times#
library(stringr)   # For keyword searches#
#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Define the path to the Excel file#
excel_file <- "Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date#
sheet_dates <- mdy(sheet_names)#
#
# Step 3: Read in all sheets, tagging each observation with its respective date#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(Date = sheet_dates[i])#
})#
#
# Step 4: Combine into a single dataframe#
observations_raw <- bind_rows(data_list)#
#
# Step 5: Combine Date and Timestamp columns into one unified Datetime column#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%Y-%m-%d %I:%M %p")#
  )#
#
# Step 6: Create logical columns for keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Step 7: Reorder columns for clarity#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Step 8: Create directory for output if it doesn’t exist#
dir.create("Data/Processed_data", recursive = TRUE, showWarnings = FALSE)#
#
# Step 9: Save outputs#
write.csv(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
saveRDS(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
# Cleaned R script from Cleaning_Hylaeus_Data.qmd (Final Fixed Version)#
# Use this for live demo or reproducible processing of Hylaeus observations#
#
# Load necessary libraries#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(lubridate) # For working with dates and times#
library(stringr)   # For keyword searches#
#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Define the path to the Excel file#
excel_file <- "../Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date#
sheet_dates <- mdy(sheet_names)#
#
# Step 3: Read in all sheets, tagging each observation with its respective date#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(Date = sheet_dates[i])#
})#
#
# Step 4: Combine into a single dataframe#
observations_raw <- bind_rows(data_list)#
#
# Step 5: Combine Date and Timestamp columns into one unified Datetime column#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%Y-%m-%d %I:%M %p")#
  )#
#
# Step 6: Create logical columns for keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Step 7: Reorder columns for clarity#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Step 8: Create directory for output if it doesn’t exist#
dir.create("Data/Processed_data", recursive = TRUE, showWarnings = FALSE)#
#
# Step 9: Save outputs#
write.csv(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
saveRDS(observations_clean, "Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
quarto::quarto_render("Cleaning_Hylaeus_Data_FINAL_Relative.qmd")
# Cleaned R script from Cleaning_Hylaeus_Data.qmd (Final Fixed Version with Type Handling)#
# Use this for live demo or reproducible processing of Hylaeus observations#
#
# Load necessary libraries#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(lubridate) # For working with dates and times#
library(stringr)   # For keyword searches#
#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Define the path to the Excel file (relative path from /Code/ folder)#
excel_file <- "../Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date#
parsed_dates <- suppressWarnings(mdy(sheet_names))#
bad_sheets <- is.na(parsed_dates)#
print(sheet_names[bad_sheets])  # Optional: inspect bad sheet names#
sheet_names <- sheet_names[!bad_sheets]#
sheet_dates <- parsed_dates[!bad_sheets]#
#
# Step 3: Read in all sheets, tagging each observation with its respective date#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp)  # normalize column type#
    )#
})#
#
# Step 4: Combine into a single dataframe#
observations_raw <- bind_rows(data_list)#
#
# Step 5: Combine Date and Timestamp columns into one unified Datetime column#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%Y-%m-%d %I:%M %p")#
  )#
#
# Step 6: Create logical columns for keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Step 7: Reorder columns for clarity#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Step 8: Create directory for output if it doesn’t exist#
dir.create("../Data/Processed_data", recursive = TRUE, showWarnings = FALSE)#
#
# Step 9: Save outputs#
write.csv(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
saveRDS(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
Cleaned R script from Cleaning_Hylaeus_Data.qmd (Final Fixed Version with Type Handling)#
# Use this for live demo or reproducible processing of Hylaeus observations#
#
# Load necessary libraries#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(lubridate) # For working with dates and times#
library(stringr)   # For keyword searches#
#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Define the path to the Excel file (relative path from /Code/ folder)#
excel_file <- "../Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date#
parsed_dates <- suppressWarnings(mdy(sheet_names))#
bad_sheets <- is.na(parsed_dates)#
print(sheet_names[bad_sheets])  # Optional: inspect bad sheet names#
sheet_names <- sheet_names[!bad_sheets]#
sheet_dates <- parsed_dates[!bad_sheets]#
#
# Step 3: Read in all sheets, tagging each observation with its respective date#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp)  # normalize column type#
    )#
})#
#
# Step 4: Combine into a single dataframe#
observations_raw <- bind_rows(data_list)#
#
# Step 5: Combine Date and Timestamp columns into one unified Datetime column#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%Y-%m-%d %I:%M %p")#
  )#
#
# Step 6: Create logical columns for keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Step 7: Reorder columns for clarity#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Step 8: Create directory for output if it doesn’t exist#
dir.create("../Data/Processed_data", recursive = TRUE, showWarnings = FALSE)#
#
# Step 9: Save outputs#
write.csv(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
saveRDS(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names to Date#
parsed_dates <- suppressWarnings(mdy(sheet_names))#
bad_sheets <- is.na(parsed_dates)#
sheet_names <- sheet_names[!bad_sheets]#
sheet_dates <- parsed_dates[!bad_sheets]#
#
# Step 3: Read and tag sheets#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp)  # force consistent column type#
    )#
})#
#
# Step 4: Combine into one dataframe#
observations_raw <- bind_rows(data_list)
Cleaned R script from Cleaning_Hylaeus_Data.qmd (Final Fixed Version with Type Handling)#
# Use this for live demo or reproducible processing of Hylaeus observations#
#
# Load necessary libraries#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(lubridate) # For working with dates and times#
library(stringr)   # For keyword searches#
#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Define the path to the Excel file (relative path from /Code/ folder)#
excel_file <- "../Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date#
parsed_dates <- suppressWarnings(mdy(sheet_names))#
bad_sheets <- is.na(parsed_dates)#
print(sheet_names[bad_sheets])  # Optional: inspect bad sheet names#
sheet_names <- sheet_names[!bad_sheets]#
sheet_dates <- parsed_dates[!bad_sheets]#
#
# Step 3: Read in all sheets, tagging each observation with its respective date#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp),#
      `Temperature (°F)` = as.numeric(`Temperature (°F)`),#
      `Wind Direction` = as.character(`Wind Direction`),#
      `Wind Notes` = as.character(`Wind Notes`)#
    )#
})#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp)  # normalize column type#
    )#
})#
#
# Step 4: Combine into a single dataframe#
observations_raw <- bind_rows(data_list)#
#
# Step 5: Combine Date and Timestamp columns into one unified Datetime column#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_datetime(paste(Date, Timestamp), format = "%Y-%m-%d %I:%M %p")#
  )#
#
# Step 6: Create logical columns for keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Step 7: Reorder columns for clarity#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Step 8: Create directory for output if it doesn’t exist#
dir.create("../Data/Processed_data", recursive = TRUE, showWarnings = FALSE)#
#
# Step 9: Save outputs#
write.csv(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
saveRDS(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
# Cleaned R script from Cleaning_Hylaeus_Data.qmd (Final Fixed Version with Type Handling)#
# Use this for live demo or reproducible processing of Hylaeus observations#
#
# Load necessary libraries#
# NOTE: parse_datetime() doesn't exist — using parse_date_time() from lubridate#
library(readxl)    # For reading Excel files#
library(dplyr)     # For data manipulation#
library(lubridate) # For working with dates and times#
library(stringr)   # For keyword searches#
#
# Although readxl works fine for Excel, converting to .csv is recommended for archival and reproducibility.#
#
# Define the path to the Excel file (relative path from /Code/ folder)#
excel_file <- "../Data/Raw_data/Kaʻena_Hylaeus Data Observations (Grouped).xlsx"#
#
# Step 1: Get sheet names#
sheet_names <- excel_sheets(excel_file)#
#
# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date#
parsed_dates <- suppressWarnings(mdy(sheet_names))#
bad_sheets <- is.na(parsed_dates)#
print(sheet_names[bad_sheets])  # Optional: inspect bad sheet names#
sheet_names <- sheet_names[!bad_sheets]#
sheet_dates <- parsed_dates[!bad_sheets]#
#
# Step 3: Read in all sheets, tagging each observation with its respective date#
data_list <- lapply(seq_along(sheet_names), function(i) {#
  read_excel(excel_file, sheet = sheet_names[i]) %>%#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp),#
      `Temperature (°F)` = as.numeric(`Temperature (°F)`),#
      `Wind Direction` = as.character(`Wind Direction`),#
      `Wind Notes` = as.character(`Wind Notes`)#
    )#
})#
    mutate(#
      Date = sheet_dates[i],#
      Timestamp = as.character(Timestamp)  # normalize column type#
    )#
})#
#
# Step 4: Combine into a single dataframe#
observations_raw <- bind_rows(data_list)#
#
# Step 5: Combine Date and Timestamp columns into one unified Datetime column#
observations_clean <- observations_raw %>%#
  mutate(#
    Datetime = parse_date_time(paste(Date, Timestamp), orders = "ymd IMp")#
  )#
#
# Step 6: Create logical columns for keyword searches#
observations_clean <- observations_clean %>%#
  mutate(#
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),#
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),#
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)#
  )#
#
# Step 7: Reorder columns for clarity#
observations_clean <- observations_clean %>%#
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,#
         Photo_Taken, Species_Sighted, Observation_Noted,#
         `Temperature (°F)`, `Wind Direction`, `Wind Notes`)#
#
# Step 8: Create directory for output if it doesn’t exist#
dir.create("../Data/Processed_data", recursive = TRUE, showWarnings = FALSE)#
#
# Step 9: Save outputs#
write.csv(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.csv", row.names = FALSE)#
saveRDS(observations_clean, "../Data/Processed_data/Hylaeus_Observations_Cleaned.rds")
