---
title: "Cleaning Hylaeus Observation Data"
format: html
editor: visual
creator: Korey "Fox" Wetherell
---

# Introduction

This script will walk through cleaning raw observation data collected during Hylaeus (native bee) fieldwork. 

This process is designed for beginners, with clear steps and explanations for each package and function used. We are focusing on making qualitative observations more organized for mixed-methods research.

> ðŸ’¡ **Tip:** While R can read `.xlsx` files with the `readxl` package, it's best practice to convert data to `.csv` for long-term reproducibility and stability. Excel files can become corrupted or change format, while `.csv` files are plain text and easier to version control or share.

# Loading Required Libraries

```{r}
# Install packages if needed (uncomment and run if necessary)
# install.packages("readxl")
# install.packages("dplyr")
# install.packages("stringr")
# install.packages("lubridate")

# Load the libraries
library(readxl)    # For reading Excel files
# Note: readxl is used to read .xlsx files directly without needing Excel or Java dependencies.
library(dplyr)     # For data manipulation
library(stringr)   # For finding keywords in notes and detail fields
library(lubridate) # For date/time parsing and formatting
```

# Load and Clean the Raw Data

```{r}
# Define the path to the Excel file (relative path from /Code/ folder)
excel_file <- "../Data/Raw_data/KaÊ»ena_Hylaeus Data Observations (Grouped).xlsx"

# Step 1: Get sheet names
sheet_names <- excel_sheets(excel_file)

# Step 2: Convert sheet names (assumed to be in MMDDYY format) to proper Date
parsed_dates <- suppressWarnings(mdy(sheet_names))
bad_sheets <- is.na(parsed_dates)
print(sheet_names[bad_sheets])  # Optional: inspect bad sheet names
sheet_names <- sheet_names[!bad_sheets]
sheet_dates <- parsed_dates[!bad_sheets]

# Step 3: Read in all sheets, tagging each observation with its respective date
# Timestamp conversion included to handle Excel's numeric format reliably

data_list <- lapply(seq_along(sheet_names), function(i) {
  df <- read_excel(excel_file, sheet = sheet_names[i])

  if ("Timestamp" %in% names(df)) {
    if (is.numeric(df$Timestamp)) {
      df$Timestamp <- format(as.POSIXct(df$Timestamp * 86400, origin = "1899-12-30", tz = "UTC"), "%I:%M %p")
    } else {
      df$Timestamp <- as.character(df$Timestamp)
    }
  } else {
    df$Timestamp <- NA_character_
  }

  df %>%
    mutate(
      Date = sheet_dates[i],
      `Temperature (Â°F)` = as.numeric(`Temperature (Â°F)`),
      `Wind Direction` = as.character(`Wind Direction`),
      `Wind Notes` = as.character(`Wind Notes`)
    )
})

# Step 4: Combine into a single dataframe
observations_raw <- bind_rows(data_list)

# Step 5: Create fallback columns if missing
if (!"Additional_Notes" %in% names(observations_raw)) {
  observations_raw$Additional_Notes <- NA_character_
}
if (!"Detail" %in% names(observations_raw)) {
  observations_raw$Detail <- NA_character_
}

# Step 6: Create unified datetime column
# This combines parsed Date and time-format Timestamp into a single field
observations_clean <- observations_raw %>%
  mutate(
    Datetime = parse_date_time(paste(Date, Timestamp), orders = "ymd IMp")
  )

# Step 7: Add keyword flags for filtering and summary work
observations_clean <- observations_clean %>%
  mutate(
    Photo_Taken = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "photo|filmed|picture|video"), TRUE, FALSE),
    Species_Sighted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "sighting|seen|observed|found"), TRUE, FALSE),
    Observation_Noted = if_else(str_detect(tolower(paste(Detail, Additional_Notes)), "observation|observed|noted|detected"), TRUE, FALSE)
  )

# Step 8: Reorder columns for clarity
observations_clean <- observations_clean %>%
  select(Datetime, Date, Timestamp, Category, Detail, Additional_Notes,
         Photo_Taken, Species_Sighted, Observation_Noted,
         `Temperature (Â°F)`, `Wind Direction`, `Wind Notes`)

# Step 9: Save outputs to new location
output_dir <- "../Data/Processed_data"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
write.csv(observations_clean, file.path(output_dir, "Hylaeus_Observations_Cleaned.csv"), row.names = FALSE)
saveRDS(observations_clean, file.path(output_dir, "Hylaeus_Observations_Cleaned.rds"))
```
**Explanation:**
- `.csv` is easy to open and share.
- `.rds` preserves R-specific formatting and is better for analysis inside R later.

# Data Dictionary

| Variable | Description |
|:--|:--|
| Datetime | Combined date and time of observation |
| Date | Date of observation (from sheet name) |
| Timestamp | Time of observation (as recorded) |
| Category | General category of observation (e.g., Fauna, Environmental Conditions) |
| Detail | Specific description of the observation |
| Additional_Notes | Extra notes recorded in the field |
| Photo_Taken | TRUE if photo or filming mentioned |
| Species_Sighted | TRUE if a species was sighted or mentioned |
| Observation_Noted | TRUE if an observation was specifically noted |
| Temperature (Â°F) | Recorded temperature (if taken) |
| Wind Direction | Recorded wind direction (if taken) |
| Wind Notes | Extra notes about wind patterns |


---

# Final Notes

- Always **clean data programmatically**, not manually, to preserve reproducibility.
- Missing values are natural in field observations; documenting them is important.
- Logical (TRUE/FALSE) flags make it easier to group and summarize types of observations later.
- **Good habits:** Check your work after big steps by using `head()`, `str()`, and `list.files()` to confirm results.

Good luck with your Hylaeus research! 

